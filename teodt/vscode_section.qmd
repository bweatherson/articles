Like most academics, I do my academic writing using software from Microsoft. It turns out Microsoft makes a few useful products for academic writing. One of them, Word, is used by huge numbers of academics, and it has some virtues. The one I primarily use, Visual Studio Code (hereafter, Code), is not as common in academia, but it has some virtues of its own. It is highly customisable, it can (when properly customised) output documents in many different formats, and, unlike Word, it is free. It's this last point I want to focus on. Why does Microsoft Corporation give away a rather useful piece of software like Code.

Usually when a business gives something away, it is because the thing given away is a complement to an important part of their business. Starbucks gives away free milk because some people will only buy coffee if milk is available, and I guess it isn't worth the hassle of selling small amounts of milk. But Code is certainly not a complement to Word; in some contexts, like mine, it is a competitor. I don't need to use Word because this free alternative is available.

Perhaps though we're looking too narrowly. Word is not Microsoft's only product. Notably, they also sell Windows. Perhaps Code is a complement to Windows. This is half true. The Windows version of Code is definitely a complement to Windows. But I'm using the Mac version, which is also free, and which is a complement to the Mac operating system, i.e., a competitor to Windows. This doesn't look like a good explanation for why Microsoft gives it away.

I've left out part of the story about Code. It can be used for writing papers, like this one, but this isn't what it is primarily designed for. It's primarily designed for writing code; hence the name. That code can be used for anything, but a very common use of it is writing progams which run on, and complement, Windows. Perhaps Microsoft gives away this software because it's a valuable input to something, namely software, which complements a key product they sell. This is, I think, half right. That's part of why Microsoft gives it away. But there are many other inputs to software that Microsoft does not subsidise. You don't see Microsoft giving away coffee or electricity, both of which are key inputs to software. We still need a further story about why Microsoft gives away this product.

The answer, I think, comes from a theory proposed two decades ago by [Joel Spolsky](https://www.joelonsoftware.com/2002/06/12/strategy-letter-v/). To quote the most quoted line from his theory

> Smart companies try to commoditize their productsâ€™ complements.

A quick refresher on what a 'commodity' is in this context. It's often useful to divide markets into three categories. In monopoly, there is only one seller in the market. In pure competition, there are arbitrarily many sellers, and they basically only compete on price. In between, in monopolistic competition, is basically all of the modern world.^[I prefer Joan Robinson's phrase 'imperfect competition' @Robinson1933, but monopolistic competition is the more common description nowadays.] For a simple illustration of the differences between the last two markets, imagine going to a gas (petrol) station. The market for the stuff you put in your car is just about pure competition. Almost no one asks where the fuel comes from, or what nice features it has or lacks. It is just fuel that goes in the car. Once you go into the shop, everything changes. The snacks and the drinks are not monopolistic markets; even in the shop everything has a competitor. But the differences between the kinds matters. People do not just choose whichever of Coke or Pepsi is cheaper; they have preferences between the two. Fuel is a commodity; it's in perfect competition. Soda is not; there the branding matters.

Spolsky's idea has been influential in explaining decisions by tech companies for decades. Ben Thompson recently used it to explain the AI strategies of various different companies, noting that it couldn't explain everything because some companies aren't very smart (include citation). But the main example Spolsky himself used was the continuous fight between hardware and software to commoditise each other, with software usually winning.

The main consumer-facing hardware Microsoft makes is the X-Box console. That benefits from having more people writing code, but it's not the biggest thing. Windows also benefits from having more software, though since the software often runs on Macs, Androids or iPhones, the gain to Microsoft in particular isn't that great. The biggest gain to Microsoft from commoditising software comes from the fact that their primary business nowadays is cloud computing, in effect, leasing out hardware. By some estimates, their Azure cloud computing platform makes about as much revenue as Office, Windows, and X-Box combined. The more things there are to do on computers, the more money that platform makes. And, in theory, making software into a commodity is how you maximise the amount of things there are to do on a computer. That's why Microsoft isn't just subsidising software, it's focussed on removing barriers to entry, i.e., on removing the things that make software not a commodity.

Let's bring this all back to decision theory. You don't need a fancy decision theory to explain why Starbucks provides free milk. Lots of theories of decision, including ones where people are mostly irrational, can predict that people will buy enough extra coffee to make it worthwhile to provide free milk. Even if theory didn't predict that, you can just see what happens if you take the milk out of a random sample of stores, and test the results. The situation with Microsoft and software is different. 

You do need a fairly powerful decision theory to say that commodification will maximise the production of complements. You don't need the full power of rational choice theory. It would be bad if you did, since rational choice theory isn't strictly true.^[It's not even obvious commodification does maximise supply given full rationality. Given *all* the assumptions of rational choice theory, the expected profit of going into a commodity business is zero, so no one goes in, so you really don't maximise outputs. Frank Knight's work on uncertainty was motivated in part by an attempt to resolve this tension in textbook economics.] But you need something close. The prediction that commodification maximises consumption is not like the prediction that more people buy coffee when milk is available; it's a surprising prediction which relies on at least some details of the theory. Moreover, it isn't easy to test. Microsoft can't create two worlds, one where they spend money removing barriers to entry and one where they don't, and see which maximises profit. This is a decision that has to be made on a theoretical basis.

So decision theory is useful here. In fact, it's useful in two related but importantly distinct ways. First, decision theory is an input into the theory of markets that imply it will be good for Microsoft if their complements (i.e., software) are commoditised. Second, the explanation for why Microsoft actually act this way is that they believe this very theory. This is, arguably, a third difference from the milk and coffee case. 

Why do coffee shops in general provide free milk? One explanation is that they are all very smart, and they understood the value of complementary goods, and saw that it was profit maximising. An equally plausible explanation is that they acted randomly, and the ones who provided free milk made more money and hence didn't go bankrupt, so free milk basically evolved. The reality is probably a mix of the two. The gains to Microsoft from removing barriers to entry in the software market are so far downstream that the evolution story isn't viable. Moreover, while there are thousands of coffee shops, there aren't many Microsofts; it's story is managed change, not evolution.

This is a really interesting fact about decision theory. It is part of explanations of surprising social behavior, like providing Code for free, and the way it explains that behavior is by positing that actors know the theory, and act how they do because of it. I'll call explanations with these characteristics reflexive explanations.

It's because 
